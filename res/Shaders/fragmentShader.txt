#version 460

in vec3 fragPos;
in vec3 normal;

out vec4 frag_color;

uniform vec3 cudeColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform vec3 viewPos;
uniform int specInt;

void main(){
	
	float ambientStrenght = 0.3f;
	vec3 ambient = lightColor * ambientStrenght;
	
	vec3 norm = normalize(normal);
	vec3 lightDir = normalize(lightPos - fragPos);
	float diff = max(dot(norm, lightDir), 0.0f);
	vec3 diffuse = diff * lightColor;
	
	float specularStrenght = 0.5f;
	vec3 viewDir = normalize(viewPos - fragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), specInt);
	vec3 specular = specularStrenght * spec * lightColor;

	frag_color = vec4((ambient + diffuse + specular) * cudeColor, 1.0f);
}